name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    # 添加权限，允许写入 packages (GHCR)
    permissions:
      contents: read
      packages: write # 必须有这个权限才能推送到 GHCR

    steps:
    - uses: actions/checkout@v4

    # (可选) 如果你的仓库名包含大写，转换为小写，因为 GHCR 的仓库名必须小写
    - name: lowercase repository name
      run: echo "IMAGE_NAME=${GITHUB_REPOSITORY@L}" >> ${GITHUB_ENV}

    # 登录到 GHCR
    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }} # 自动由 GitHub 提供，用于 GHCR 认证

    # 设置 Docker Buildx (用于多平台构建和缓存，推荐)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 构建并推送 Docker 镜像
    - name: Build and push Docker image
      uses: docker/build-push-action@v6 # 推荐使用最新版本
      with:
        context: . # Dockerfile 所在的上下文路径
        file: Dockerfile # Dockerfile 的路径
        push: true # 关键：设置为 true 才会推送
        platforms: linux/amd64,linux/arm64 # 示例：构建多平台镜像
        tags: |
          # 替换为你的 GHCR 路径，例如 ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          # 假设你的 my-image-name 应该映射到你的 GHCR 仓库名
          # 这里使用 ${{ env.IMAGE_NAME }} 会更通用
          ghcr.io/${{ env.IMAGE_NAME }}:latest # 始终打 latest 标签
          ghcr.io/${{ env.IMAGE_NAME }}:$(date +%s) # 使用时间戳作为唯一标签
        cache-from: type=gha # 开启 GitHub Actions 缓存，加速构建
        cache-to: type=gha,mode=max
